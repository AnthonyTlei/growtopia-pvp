// ========================================
// GENERATOR & DATASOURCE
// ========================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================
enum Role {
  ADMIN
  OWNER
  USER
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// ========================================
// AUTHENTICATION MODELS (NextAuth.js)
// ========================================
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ========================================
// USER MODEL
// ========================================
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  ign           String?
  acceptedTerms Boolean   @default(false) @map("accepted_terms")

  accounts Account[]
  sessions Session[]

  matches    MatchParticipant[]
  matchesWon Match[]            @relation("MatchWinner")

  @@map("users")
}

// ========================================
// MATCH MODELS
// ========================================
model MatchParticipant {
  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  score Int @default(0)

  @@id([matchId, userId])
  @@index([userId])
  @@index([matchId])
}

model Match {
  id String @id @default(cuid())

  participants MatchParticipant[]

  winner   User?   @relation("MatchWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winnerId String?

  rated Boolean @default(false)

  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  completedAt DateTime? @db.Timestamptz(3)

  status MatchStatus @default(PENDING)

  @@index([winnerId])
}
